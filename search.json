[{"title":"变量和基本数据类型","url":"‘http://www.zputalk.top’/2019/02/02/python 变量和基本数据类型/","content":"<h5 id=\"1-变量\"><a href=\"#1-变量\" class=\"headerlink\" title=\"1. 变量\"></a>1. 变量</h5><p>1.1 变量的命名和使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">* 变量名只能包含字母数字和下划线，数字不能作为变量名开头</div><div class=\"line\">* 变量名不能包含空格，可以使用下划线隔开</div><div class=\"line\">* 不能用关键字作为变量名</div><div class=\"line\">* 变量名一般为简短和描述性</div><div class=\"line\">* 慎用小写字母i和大写字母o</div></pre></td></tr></table></figure>\n<p>1.2 使用变量时避免命名的错误</p>\n<h5 id=\"2-字符串\"><a href=\"#2-字符串\" class=\"headerlink\" title=\"2. 字符串\"></a>2. 字符串</h5><p>2.1 使用方法修改字符串的大小写</p>\n<p>首字母大写 title</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &apos;jam hello&apos;</div><div class=\"line\">Jam Hello</div></pre></td></tr></table></figure>\n<p>字母全部转为大写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &apos;jam hello&apos;</div><div class=\"line\">JAM HELLO</div></pre></td></tr></table></figure>\n<p>字母全部转为小写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &apos;JAM HELLO&apos;</div><div class=\"line\">jam hello</div></pre></td></tr></table></figure>\n<p>2.2 合并（拼接）字符串<br><code>first_name = &#39;z&#39; last_name = &#39;lp&#39; full_name = first_name + last_name &#39;zlp&#39;</code><br>2.3 使用制表符和换行符来添加空白</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(&apos;\\tpython&apos;) // 空白</div><div class=\"line\">print(&apos;\\npython&apos;) // 换行</div></pre></td></tr></table></figure>\n<p>2.4 删除空白</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = &apos;hello world&apos;</div><div class=\"line\">print(name.rstrip())</div></pre></td></tr></table></figure>\n<p>2.5 使用字符串时避免语法错误<br>程序中包含非法的 python 代码，就会导致语法错误<br>2.6 python2 的 print 语句<br>python ‘hello world’</p>\n<h5 id=\"3-数字\"><a href=\"#3-数字\" class=\"headerlink\" title=\"3. 数字\"></a>3. 数字</h5><p>3.1 整数<br>可对整数进行加(+)减(-)乘()除(/)<br>2 + 3<br>5<br>2 - 1<br>1<br>3 * 2<br>6<br>6 / 2<br>3<br>3.2 浮点数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(0.1 + 0.1)</div><div class=\"line\">0.2</div><div class=\"line\">print(0.2 + 0.2)</div><div class=\"line\">0.4</div><div class=\"line\">print(0.2 + 0.1)</div><div class=\"line\">0.30000000000000004</div><div class=\"line\">print(0.2 * 0.1)</div><div class=\"line\">0.020000000000000004</div></pre></td></tr></table></figure>\n<p>3.3 使用函数 str()避免类型错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用str转为字符类型</div><div class=\"line\">age = 23</div><div class=\"line\">print(&apos;hello&apos; + str(age) + &apos;world&apos;)</div></pre></td></tr></table></figure>\n<h5 id=\"4-注释\"><a href=\"#4-注释\" class=\"headerlink\" title=\"4. 注释\"></a>4. 注释</h5><p>4.1 如何书写注释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在python中 注释用#标识</div><div class=\"line\"># hello world</div></pre></td></tr></table></figure>\n<p>4.2 该编写什么样的注释<br>编写清晰简洁的注释</p>\n","categories":["python"],"tags":["python"]},{"title":"Event loop","url":"‘http://www.zputalk.top’/2018/11/30/Event Loop/","content":"<h1 id=\"Event-Loop-是什么？\"><a href=\"#Event-Loop-是什么？\" class=\"headerlink\" title=\"Event Loop 是什么？\"></a>Event Loop 是什么？</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Event Loop 是js的执行机制</div></pre></td></tr></table></figure>\n<h1 id=\"为啥需要-Event-Loop\"><a href=\"#为啥需要-Event-Loop\" class=\"headerlink\" title=\"为啥需要 E\bvent Loop\"></a>为啥需要 E\bvent Loop</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">众所周知 js是一门单线程语言，\bjs中的语言都是按照代码顺序执行的，也就是需要\b后一个任务\b必须要等待前一个任务执行完毕才能执行\b,比如我网页中有个列表请求数据，由于种种原因数据迟迟未返回。如果\b按照咱们刚刚说的执行顺序，\b那就是\b等待\b数据加载完才能执行之后的任务。所以为了避免堵塞，就有了Event Loop</div></pre></td></tr></table></figure>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxp0r50bz4j30gp0endg6.jpg\" alt=\"Alt Text\"></p>\n<ul>\n<li>如图当 js 主线程运行时就会产生堆（heap）和栈（stack）。</li>\n<li>js 在执行的过程中会产生执行环境,当 \b 遇到异步事件时就会把 \b 它放到任务队列中（如执行栈中的去调用一些 webApi，click 事件等被放在任务队列中）。</li>\n<li>当执行栈中执行完毕后，主线程就会去读取任务队列把第一个放到执行栈执行（图中执行栈执行完 \b 会把任务队列中 \b 的 click 事件的回调放到执行栈 \b 执行）</li>\n<li>当执行栈执行时遇到异步，又回放到任务队列中</li>\n<li>执行栈清空后，会去检查任务队列中是否有需要执行的，如果有就拿过来执行，\b 会一直重复这个 \b 动作，称为 Event Loop</li>\n</ul>\n<h1 id=\"macrotask、microtask\"><a href=\"#macrotask、microtask\" class=\"headerlink\" title=\"macrotask、microtask\"></a>macrotask、microtask</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">这两者是对异步任务的一个划分，不同\b的异步任务会y依次进入自身对应的队列中,等待Event Loop 把他们放入执行栈\b执行</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">macrotask(宏任务): setTimeout、setInterval、setImmediate、I/O、UI交互事</div><div class=\"line\">microtask(微任务): Promise、process.nextTick、MutaionObserver</div></pre></td></tr></table></figure>\n<h1 id=\"浏览器环境的-Event-Loop\"><a href=\"#浏览器环境的-Event-Loop\" class=\"headerlink\" title=\"浏览器环境的 Event Loop\"></a>浏览器环境的 Event Loop</h1><p>来段代码实践下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">\bsetTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">执行过程：</div><div class=\"line\">根据js从上往下执行，遇到setTimeout 后会先把setTimeout 放到任务队列中,然后继续往下执行遇到log，执行栈执行log输出<span class=\"number\">2</span>，然后这时候去任务队列检测是否有需要执行的发现有setTimeout ,然后放到执行栈执行输出<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>上面的发现太简单了，再来段代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> a = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"keyword\">const</span> b = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">  &#125;, <span class=\"number\">200</span>)</div><div class=\"line\">  <span class=\"keyword\">const</span> c = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</div><div class=\"line\">  &#125;, <span class=\"number\">100</span>)</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> d = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</div><div class=\"line\">  <span class=\"keyword\">const</span> e = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</div><div class=\"line\">  &#125;, <span class=\"number\">1</span>)</div><div class=\"line\">&#125;, <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</div><div class=\"line\"></div><div class=\"line\">执行过程：</div><div class=\"line\">\b依次往下执行</div><div class=\"line\">遇到a(settimeout) 放入任务队列,然后继续执行,遇到d(setTimeout) \b放到macrotask任务队列中，继续执行log输出<span class=\"number\">6</span>，这时候发现执行栈为空，开始去检测任务队列，\b发现又\b需要执行的，d 时间为<span class=\"number\">0</span> ，\b执行输出<span class=\"number\">4</span>，然后遇到e（setTimeout）放进macrotask队列中，然后再\b去队列中取，遇到e 输出<span class=\"number\">5</span>, 往下遇到a然后输出<span class=\"number\">1</span>, 往下执行遇到b,c 放进macrotask任务\b队列，执行栈\b执行为空，然后重复执行\b输出<span class=\"number\">3</span>，输出<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p>setTimeout 玩完后，肯定想到是 setInterval</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">其实两个是差不多的，setInterval会每隔指定的时间将注册的函数放到队列中，如果前面的任务耗时太久，那么同样需要等待</div></pre></td></tr></table></figure>\n<p>\b 再加个 promise 玩玩</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</div><div class=\"line\">        resolve()</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</div><div class=\"line\">    resolve()</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</div><div class=\"line\">        resolve()</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">9</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">执行过程：</div><div class=\"line\"><span class=\"number\">1.</span>遇到log后输出<span class=\"number\">1</span>,然后遇到setTimeout放到mac任务队列中,继续\b往下执行,遇到promise然后输出<span class=\"number\">5</span>把then放到mic任务队列中,继续执行遇到setTimeout放到mac任务队列中</div><div class=\"line\"><span class=\"number\">2.</span>这时候取微任务中promise的then执行输出<span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">3.</span>然后执行宏任务取setTimout输出<span class=\"number\">2</span>,遇到promise执行输出<span class=\"number\">3</span>,然后\b把then放进mic任务队列。</div><div class=\"line\"><span class=\"number\">4.</span>取mic中promise的then\b输出<span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5.</span>取mac中setTimeout 输出<span class=\"number\">7</span>,遇到promise执行输出<span class=\"number\">8</span>，然后把then放进\bmic任务队列。</div><div class=\"line\"><span class=\"number\">6.</span>去mic任务队列中取第一个promise中的then执行输出<span class=\"number\">8</span></div><div class=\"line\"><span class=\"number\">7.</span>然后mic取第一个promise的then输出<span class=\"number\">9</span></div><div class=\"line\">总上就是执行完一次宏任务或者宏任务队列为空去清空下微任务队列，算一次循环</div></pre></td></tr></table></figure>\n<h1 id=\"Node-环境的-Event-Loop\"><a href=\"#Node-环境的-Event-Loop\" class=\"headerlink\" title=\"Node 环境的 Event Loop\"></a>Node 环境的 Event Loop</h1><p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwly1fxpcqw7mz5j31200lmwgh.jpg\" alt=\"Alt Text\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node的Event Loop分阶段，阶段有先后，依次是</div><div class=\"line\">expired timers and intervals，即到期的setTimeout/setInterval</div><div class=\"line\">I/O events，包含文件，网络等等</div><div class=\"line\">immediates，通过setImmediate注册的函数</div><div class=\"line\">close handlers，close事件的回调，比如TCP连接断开</div><div class=\"line\"></div><div class=\"line\">同步任务及每个阶段之后都会清空microtask队列</div><div class=\"line\">优先清空next tick queue，即通过process.nextTick注册的函数, 全部清空后然后才会去清空other queue</div><div class=\"line\">再清空other queue，常见的如Promise, 一直到任务队列全部清空后再去进入下一个事件循环</div></pre></td></tr></table></figure>\n<p>发现还有 process.nextTick \b\b 再来搞下直接上代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">        resolve()</div><div class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</div><div class=\"line\">    resolve()</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">7</span>)</div><div class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">8</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">执行过程：</div><div class=\"line\">同步执行输出：<span class=\"number\">5</span>、<span class=\"number\">7</span></div><div class=\"line\">优先清除next tick queue 即执行process.nextTick 输出 <span class=\"number\">8</span></div><div class=\"line\">再去清除other queue 即输出 <span class=\"number\">6</span></div><div class=\"line\">然后执行setTimeout 输出 <span class=\"number\">1</span>、<span class=\"number\">2</span></div><div class=\"line\">再去清除next tick queue 输出 <span class=\"number\">4</span></div><div class=\"line\">清除\bother queue 输出 <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>setImmediate</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\">执行过程：</div><div class=\"line\">两个执行时无法确定两者之间的顺序，如果执行setTimout, 到poll的这个执行节点，会重新返回查找timers这个节点上是否有需要执行的，然后发现为空，再进入下一个事件循环,执行settmmediate</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span>  fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\">fs.open(<span class=\"string\">'./style.css'</span>, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">process.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">6</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">执行过程：</div><div class=\"line\"><span class=\"number\">1.</span> fs 放入I/O 中，继续执行，</div><div class=\"line\"><span class=\"number\">2.</span> 循环结束后清理next tick queue 输出 <span class=\"number\">6</span></div><div class=\"line\"><span class=\"number\">3.</span> 然后清理other queue 输出 <span class=\"number\">3</span> 进入后会把当前队列清空完毕，输出 <span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">4.</span> 然后进入next tick queue 清空当前队列 输出 <span class=\"number\">5</span>，进入下一个事件循环</div><div class=\"line\"><span class=\"number\">5.</span> 输出 <span class=\"number\">2</span> 然后输出 <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>总结：<br>浏览器中是没执行完 mac（宏任务）一次，去检测下是否有微任务<br>node 是执行完所有的 mac（宏任务），才去检测下是否有微任务</p>\n","categories":["javascript"],"tags":["javascript"]},{"title":"Array与Object常用的api","url":"‘http://www.zputalk.top’/2018/02/28/常用的Array与Object的api/","content":"<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。<br>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(); <span class=\"comment\">// 实例</span></div><div class=\"line\">newMap.set(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>); <span class=\"comment\">// 添加键</span></div><div class=\"line\">newMap.get(<span class=\"string\">'a'</span>); <span class=\"comment\">// 获取值</span></div><div class=\"line\">newMap.has(<span class=\"string\">'a'</span>); <span class=\"comment\">// 检测是否有这个键</span></div><div class=\"line\">newMap.delete(<span class=\"string\">'a'</span>); <span class=\"comment\">// 删除这个键</span></div></pre></td></tr></table></figure></p>\n<p>场景：项目中选择街区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 模拟接口返回的数据</span></div><div class=\"line\"><span class=\"keyword\">let</span> cityData = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        code: <span class=\"number\">0</span>,</div><div class=\"line\">        item: <span class=\"string\">'北京'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        code: <span class=\"number\">1</span>,</div><div class=\"line\">        item: <span class=\"string\">'天津'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        code: <span class=\"number\">2</span>,</div><div class=\"line\">        item: <span class=\"string\">'石家庄'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> city = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 遍历数组处理数据</span></div><div class=\"line\">cityData.forEach(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</div><div class=\"line\">    city.push([item.code, item.item]);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mapArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(city);</div><div class=\"line\"><span class=\"keyword\">let</span> itemName = mapArr.get(<span class=\"number\">0</span>); <span class=\"comment\">// 北京</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> newSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr); <span class=\"comment\">// [1,2,3,4]</span></div><div class=\"line\">newSet.add(<span class=\"number\">5</span>); <span class=\"comment\">// [1,2,3,4,5] 添加</span></div><div class=\"line\">newSet.delete(<span class=\"number\">5</span>); <span class=\"comment\">// [1,2,3,4] 删除</span></div><div class=\"line\">newSet.clear(); <span class=\"comment\">// 清除</span></div><div class=\"line\">newSet.size(); <span class=\"comment\">// 获取长度</span></div><div class=\"line\">newSet.has(); <span class=\"comment\">// 检测是否存在</span></div></pre></td></tr></table></figure></p>\n<p>场景：项目中选择试卷后需显示选择试卷的种类，数组去重<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> setData = [<span class=\"string\">'语文'</span>, <span class=\"string\">'数学'</span>, <span class=\"string\">'英语'</span>, <span class=\"string\">'语文'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> newSetArr = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(setData);</div></pre></td></tr></table></figure></p>\n<h1 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h1><h2 id=\"1-Array-from\"><a href=\"#1-Array-from\" class=\"headerlink\" title=\"1. Array.from()\"></a>1. Array.from()</h2><p>转换成数组<br>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>) 转换<span class=\"built_in\">Map</span></div><div class=\"line\"><span class=\"keyword\">let</span> newMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'a'</span>, <span class=\"number\">1</span>], [<span class=\"string\">'b'</span>, <span class=\"number\">2</span>]]);</div><div class=\"line\"><span class=\"keyword\">let</span> mapArr = <span class=\"built_in\">Array</span>.from(newMap);</div><div class=\"line\"></div><div class=\"line\">(<span class=\"number\">2</span>) 转换成<span class=\"built_in\">Set</span></div><div class=\"line\"><span class=\"keyword\">let</span> newSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"keyword\">let</span> setArr = <span class=\"built_in\">Array</span>.from(newSet);</div><div class=\"line\"></div><div class=\"line\">(<span class=\"number\">3</span>) 转换类数组</div><div class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</div><div class=\"line\">    <span class=\"number\">0</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    length: <span class=\"number\">4</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = <span class=\"built_in\">Array</span>.from(arr);</div><div class=\"line\"></div><div class=\"line\">(<span class=\"number\">4</span>) 转换字符串</div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'hello world'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> strArr = <span class=\"built_in\">Array</span>.from(str);</div><div class=\"line\"></div><div class=\"line\">(<span class=\"number\">5</span>) 处理数组中的数据</div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = <span class=\"built_in\">Array</span>.from(arr, (n)=&gt; n+<span class=\"number\">1</span>)</div><div class=\"line\">newArr <span class=\"comment\">// [2,3,4,5]</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"2-Array-reduce\"><a href=\"#2-Array-reduce\" class=\"headerlink\" title=\"2. Array.reduce()\"></a>2. Array.reduce()</h2><p>方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</p>\n<p>示例:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 累加器</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\">arr.reduce(<span class=\"function\">(<span class=\"params\">m,n</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> m + n;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-Array-every\"><a href=\"#3-Array-every\" class=\"headerlink\" title=\"3. Array.every\"></a>3. Array.every</h2><p>检测数组中的每一个元素</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">arr.every(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">0</span>; <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>场景：项目中的表单是否全部填写，显示提交按钮<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">    <span class=\"string\">'a'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'b'</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">'c'</span>: <span class=\"number\">3</span>,</div><div class=\"line\">    <span class=\"string\">'d'</span>: <span class=\"string\">''</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> objArr = <span class=\"built_in\">Object</span>.keys(obj);</div><div class=\"line\">objArr.every(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> item;</div><div class=\"line\">&#125;) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"4-Array-some\"><a href=\"#4-Array-some\" class=\"headerlink\" title=\"4. Array.some\"></a>4. Array.some</h2><p>检测数组中某些元素<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\">arr.some(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span> <span class=\"comment\">// true</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"5-Array-filter\"><a href=\"#5-Array-filter\" class=\"headerlink\" title=\"5.Array.filter()\"></a>5.Array.filter()</h2><p>方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。<br>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = arr.filter(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span>; </div><div class=\"line\">&#125;);</div><div class=\"line\">newArr <span class=\"comment\">// [3,4,5]</span></div></pre></td></tr></table></figure></p>\n<p>场景：项目app中的筛选<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">'a'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">'isCheck'</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;, </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">'a'</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"string\">'isCheck'</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;, </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">'a'</span>: <span class=\"number\">3</span>,</div><div class=\"line\">        <span class=\"string\">'isCheck'</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = arr.filter(<span class=\"function\">(<span class=\"params\">item, index, arr</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> item[<span class=\"string\">'isCheck'</span>];</div><div class=\"line\">&#125;)</div><div class=\"line\">newArr; <span class=\"comment\">// arr = [&#123;'a': 1,'isCheck': true&#125;, &#123;'a': 3,'isCheck': true&#125;];</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"6-Array-includes\"><a href=\"#6-Array-includes\" class=\"headerlink\" title=\"6. Array.includes()\"></a>6. Array.includes()</h2><p>方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。<br>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\">arr.includes(<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<p>和indexOf的区别<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果数组中含有<span class=\"literal\">NaN</span>,由于indexOf内部函数采用的是=== 所以会返回<span class=\"number\">-1</span>,includes返回<span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h1><h2 id=\"1-Object-assign\"><a href=\"#1-Object-assign\" class=\"headerlink\" title=\"1.Object.assign()\"></a>1.Object.assign()</h2><p>方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</div><div class=\"line\">    a: <span class=\"number\">1</span>,</div><div class=\"line\">    b: <span class=\"number\">2</span>,</div><div class=\"line\">    c: <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</div><div class=\"line\">obj2.a <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"2-object-keys\"><a href=\"#2-object-keys\" class=\"headerlink\" title=\"2. object.keys()\"></a>2. object.keys()</h2><p>方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for…in 循环遍历该对象时返回的顺序一致 （两者的主要区别是 一个 for-in 循环还会枚举其原型链上的属性）</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">    <span class=\"string\">'a'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'b'</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">'c'</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj); <span class=\"comment\">// ['a', 'b', 'c']</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"3-Object-values\"><a href=\"#3-Object-values\" class=\"headerlink\" title=\"3. Object.values()\"></a>3. Object.values()</h2><p>方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for…in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">    <span class=\"string\">'a'</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"string\">'b'</span>: <span class=\"number\">2</span>,</div><div class=\"line\">    <span class=\"string\">'c'</span>: <span class=\"number\">3</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj); <span class=\"comment\">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"4-Object-defineProperty\"><a href=\"#4-Object-defineProperty\" class=\"headerlink\" title=\"4. Object.defineProperty()\"></a>4. Object.defineProperty()</h2><p>方法直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">\"a\"</span>, &#123;</div><div class=\"line\">\tenumerable: <span class=\"literal\">false</span>,</div><div class=\"line\">\tconfigurable: <span class=\"literal\">false</span>,</div><div class=\"line\">\twritable: <span class=\"literal\">false</span>,</div><div class=\"line\">\tvalue: <span class=\"number\">1</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, prop, descriptor)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//descriptor 可包含4个属性，如下：</span></div><div class=\"line\">  <span class=\"comment\">// configurable 当且仅当这个属性描述符值为 true 时，该属性可能会改变，也可能会被从相应的对象删除。默认为 false。</span></div><div class=\"line\">  <span class=\"comment\">// enumerable true 当且仅当该属性出现在相应的对象枚举属性中。默认为 false。</span></div><div class=\"line\">  <span class=\"comment\">// value 属性的值</span></div><div class=\"line\">  <span class=\"comment\">// writable 定义属性值是否可写。</span></div><div class=\"line\">  <span class=\"comment\">// get 一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。方法将返回用作属性的值。默认为 undefined。</span></div><div class=\"line\">  <span class=\"comment\">// set 同get一起使用，功能互补。</span></div><div class=\"line\">  <span class=\"comment\">// 其中value和writable一组，get和set一组，不可同时出现。</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"5-Object-hasOwnProperty\"><a href=\"#5-Object-hasOwnProperty\" class=\"headerlink\" title=\"5. Object.hasOwnProperty()\"></a>5. Object.hasOwnProperty()</h2><p>方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性</p>\n<p>示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">    a: <span class=\"number\">1</span>,</div><div class=\"line\">    b: <span class=\"number\">2</span>,</div><div class=\"line\">    c: <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\">obj.hasOwnProperty(<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n","categories":["js"],"tags":["js"]},{"title":"Docker 制作前端镜像以及部署","url":"‘http://www.zputalk.top’/2018/02/04/docker/","content":"<p>以下都是基于mac环境，window环境自行百度。</p>\n<h1 id=\"mac-安装-Docker\"><a href=\"#mac-安装-Docker\" class=\"headerlink\" title=\"mac 安装 Docker\"></a>mac 安装 Docker</h1><ol>\n<li>下载<br>通过这个链接下载 <a href=\"https://download.docker.com/mac/stable/Docker.dmg\" target=\"_blank\" rel=\"external\">https://download.docker.com/mac/stable/Docker.dmg</a></li>\n<li>安装<br>双击下载的dmg文件，将docker拖拽到Application里面<br><img src=\"https://upload.cc/i/fOicnd.jpg\" alt=\"\"></li>\n<li>启动docker<br><img src=\"https://upload.cc/i/ZV9itI.jpg\" alt=\"\"></li>\n<li>docker 常用命令<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 查看docker版本</div><div class=\"line\">docker version</div><div class=\"line\"># 显示docker系统的信息</div><div class=\"line\">docker info</div><div class=\"line\"># 日志信息</div><div class=\"line\">docker logs</div><div class=\"line\"># 故障检查</div><div class=\"line\">service  docker  status</div><div class=\"line\"># 启动关闭docker</div><div class=\"line\">sudo service docker start|stop</div><div class=\"line\"># 查看docker容器</div><div class=\"line\">docker ps</div><div class=\"line\"># 删除容器</div><div class=\"line\">docker rm [容器id]</div><div class=\"line\"># 删除镜像</div><div class=\"line\">docker rmi [镜像id]</div><div class=\"line\"># 启动容器</div><div class=\"line\">docker start [容器id]</div><div class=\"line\"># 停止容器</div><div class=\"line\">docker stop [容器id]</div><div class=\"line\"># 运行一个新的容器，并命名、端口映射、文件夹映射</div><div class=\"line\">docker run --name redmine -p <span class=\"number\">9003</span>:<span class=\"number\">80</span> -p <span class=\"number\">9023</span>:<span class=\"number\">22</span> -d -v /<span class=\"keyword\">var</span>/redmine/files:<span class=\"regexp\">/redmine/</span>files -v /<span class=\"keyword\">var</span>/redmine/mysql:<span class=\"regexp\">/var/</span>lib/mysql sameersbn/redmine</div><div class=\"line\"># 搜索镜像</div><div class=\"line\">docker search</div><div class=\"line\"># 拉取镜像</div><div class=\"line\">docker pull</div><div class=\"line\"># 推送镜像</div><div class=\"line\">docker push</div><div class=\"line\"># 构建镜像</div><div class=\"line\">docker build -t &lt;镜像名字&gt; &lt;dockerFiler路径&gt;</div><div class=\"line\">docker build -t xx/gitlab .</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"利用daoCloud-构建镜像部署\"><a href=\"#利用daoCloud-构建镜像部署\" class=\"headerlink\" title=\"利用daoCloud 构建镜像部署\"></a>利用daoCloud 构建镜像部署</h1><ol>\n<li>利用vue-cli 创建一个vue项目<br>可以自行搜索vue官方文档，也可以自己创建一个项目。</li>\n<li>在项目中创建一个Dockerfile 文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 使用 node:6.10.3</div><div class=\"line\">FROM node:<span class=\"number\">6.10</span><span class=\"number\">.3</span>-slim</div><div class=\"line\"># 安装nginx</div><div class=\"line\">RUN apt-get update \\</div><div class=\"line\">    &amp;&amp; apt-get install -y nginx</div><div class=\"line\"># 制定工作目录</div><div class=\"line\">WORKDIR /app</div><div class=\"line\"># 将当前目录下的所有文件拷贝到工作目录</div><div class=\"line\">COPY ./app</div><div class=\"line\"># 声明运行时容器提供的端口</div><div class=\"line\">EXPOSE <span class=\"number\">80</span></div><div class=\"line\"># 安装依赖</div><div class=\"line\"># 打包app</div><div class=\"line\"># 将打包的文件拷贝到nginx下的文件下</div><div class=\"line\">RUN npm install</div><div class=\"line\">    &amp;&amp; npm run build</div><div class=\"line\">    &amp;&amp; cp -r dist/\\*  <span class=\"regexp\">/var/</span>www/html</div><div class=\"line\">    &amp;&amp; rm -rf /app  </div><div class=\"line\"># 启动nginx</div><div class=\"line\">CMD [<span class=\"string\">\"nginx\"</span>,<span class=\"string\">\"-g\"</span>,<span class=\"string\">\"daemon off;\"</span>]</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>3.配置DaoCloud<br><br>(1).注册DaoCloud,并配置远程代码库<br><img src=\"https://upload.cc/i/yhopwK.jpg\" alt=\"\"><br>(2) 创建项目 并build镜像<br><img src=\"https://upload.cc/i/AMgw9y.jpg\" alt=\"\"><br>(3) 然后部署到主机上，DaoCloud 提供两个小时的测试机子<br><img src=\"https://upload.cc/i/z2yPHX.jpg\" alt=\"\"><br><img src=\"https://upload.cc/i/O81JHX.jpg\" alt=\"\"><br><img src=\"https://upload.cc/i/TR1xEw.jpg\" alt=\"\"><br><img src=\"https://upload.cc/i/OwYGU9.jpg\" alt=\"\"></p>\n<ol>\n<li>部署成功后，外部访问<br><img src=\"https://upload.cc/i/i5GtZ3.jpg\" alt=\"\"><h1 id=\"本地docker构建\"><a href=\"#本地docker构建\" class=\"headerlink\" title=\"本地docker构建\"></a>本地docker构建</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 拉取nginx镜像</div><div class=\"line\">docker pull hub.c<span class=\"number\">.163</span>.com/library/nginx:latest</div><div class=\"line\">#启动nginx容器</div><div class=\"line\">docker run -p <span class=\"number\">8080</span>:<span class=\"number\">80</span> --name nginx_web -it hub.c<span class=\"number\">.163</span>.com/library/nginx /bin/bash</div><div class=\"line\"># 修改80端口指定的入口文件</div><div class=\"line\"># 启动nginx</div><div class=\"line\">nginx</div><div class=\"line\"># 进入项目中有dockerfile的文件运行</div><div class=\"line\">docker build --rm -t vue-hello .</div><div class=\"line\"># 检查镜像是否构建成功</div><div class=\"line\">docker images</div><div class=\"line\"># 运行镜像</div><div class=\"line\">docker run -p <span class=\"number\">8080</span>:<span class=\"number\">80</span> vue-hello</div><div class=\"line\"># 访问应用</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","categories":[],"tags":["Docker"]},{"title":"webpack基本的配置","url":"‘http://www.zputalk.top’/2017/10/26/webpack的基本配置/","content":"<h1 id=\"webpack的主要功能\"><a href=\"#webpack的主要功能\" class=\"headerlink\" title=\"webpack的主要功能\"></a>webpack的主要功能</h1><p>代码分块： webpack有两种模块依赖，一种是异步，一种是同步，编译时可以将代码分为代码块，代码块可以实现按需加载。<br>Loaders：webpack只会处理js，为了将其他资源也定义为模块，并转化为javascript，webpack定义了不同的loaders，不同的loaders可以将对应的资源转化为javascript模块。<br>智能模块解析：webpack可以很容易的将第三方库转化为模块集成到项目代码中<br>webpack的可定制化插件系统，本身也是通过插件的方式实现。</p>\n<h1 id=\"webpack的安装配置\"><a href=\"#webpack的安装配置\" class=\"headerlink\" title=\"webpack的安装配置\"></a>webpack的安装配置</h1><p>webpack是基于node实现的，安装node。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">官网下载安装 http:<span class=\"comment\">//nodejs.cn/download/</span></div><div class=\"line\">终端安装 brew install node</div></pre></td></tr></table></figure></p>\n<p>终端安装webpack-cli<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install webpack -g</div></pre></td></tr></table></figure></p>\n<p>新建一个demo项目 -&gt; 新建build文件夹  -&gt; 新建webpack.config.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir webpack-demo</div><div class=\"line\"><span class=\"built_in\">cd</span> webpack-demo</div><div class=\"line\">mkdir dist</div><div class=\"line\">mkdir src</div><div class=\"line\"><span class=\"built_in\">cd</span> src</div><div class=\"line\">mkdir js</div><div class=\"line\"><span class=\"built_in\">cd</span> js</div><div class=\"line\">touch index.js</div><div class=\"line\"><span class=\"built_in\">cd</span> ..</div><div class=\"line\">mkdir css</div><div class=\"line\"><span class=\"built_in\">cd</span> css</div><div class=\"line\">touch inedx.css</div><div class=\"line\"><span class=\"built_in\">cd</span> ..</div><div class=\"line\">mkidr img</div><div class=\"line\"><span class=\"built_in\">cd</span> ..</div><div class=\"line\">touch index.html</div><div class=\"line\">touch webpack.config.js</div></pre></td></tr></table></figure></p>\n<p>项目结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">--dist</div><div class=\"line\">--src</div><div class=\"line\">  --js</div><div class=\"line\">    -- index.js</div><div class=\"line\">  --css</div><div class=\"line\">    -- index.css</div><div class=\"line\">  --img</div><div class=\"line\">    -- logo.jpg   </div><div class=\"line\">--index.html</div><div class=\"line\">--webpack.config.js</div></pre></td></tr></table></figure></p>\n<p>webpack.config.js中的配置大致分为以下结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    entry: [],      <span class=\"comment\">// 入口文件</span></div><div class=\"line\">    output: &#123;&#125;,     <span class=\"comment\">// 出口文件</span></div><div class=\"line\">    <span class=\"built_in\">module</span>:&#123;        <span class=\"comment\">// 各种loader</span></div><div class=\"line\">        loader: [</div><div class=\"line\">            &#123;&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    devServer: &#123;    <span class=\"comment\">// webpack起的服务器</span></div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: []     <span class=\"comment\">// 插件</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>入口（entry）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exprots = &#123;</div><div class=\"line\">    entry: [__dirname + <span class=\"string\">'/src/index.js'</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>出口（output）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exprots = &#123;</div><div class=\"line\">    entry: [__dirname + <span class=\"string\">'/src/index.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(__dirname + <span class=\"string\">'/dist'</span>),</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>loaders<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exprots = &#123;</div><div class=\"line\">    entry: [__dirname + <span class=\"string\">'/src/index.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(__dirname + <span class=\"string\">'/dist'</span>),</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">      loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(htm|html)$/i</span>,</div><div class=\"line\">                loader: <span class=\"string\">'html-withimg-loader'</span> <span class=\"comment\">// 处理html中引入的图片问题</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.js?$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">'eslint-loader'</span>,</div><div class=\"line\">                include: [__dirname + <span class=\"string\">'/src/js'</span>]</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</div><div class=\"line\">                loader: <span class=\"string\">'url-loader'</span>,</div><div class=\"line\">                query: &#123;</div><div class=\"line\">                    limit: <span class=\"number\">10000</span>,</div><div class=\"line\">                    name: (<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>插件(Plugins)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); <span class=\"comment\">// 自动生成一个html文件</span></div><div class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>); <span class=\"comment\">// 分离css</span></div><div class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>); <span class=\"comment\">// 清除打包前的旧文件</span></div><div class=\"line\"><span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>); <span class=\"comment\">// 压缩</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exprots = &#123;</div><div class=\"line\">    entry: [__dirname + <span class=\"string\">'/src/index.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(__dirname + <span class=\"string\">'/dist'</span>),</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">      loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(htm|html)$/i</span>,</div><div class=\"line\">                loader: <span class=\"string\">'html-withimg-loader'</span> <span class=\"comment\">// 处理html中引入的图片问题</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.js?$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">'eslint-loader'</span>,</div><div class=\"line\">                include: [__dirname + <span class=\"string\">'/src/js'</span>]</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</div><div class=\"line\">                loader: <span class=\"string\">'url-loader'</span>,</div><div class=\"line\">                query: &#123;</div><div class=\"line\">                    limit: <span class=\"number\">10000</span>,</div><div class=\"line\">                    name: (<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]  </div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),                 <span class=\"comment\">// 打包前先清除dist里的文件</span></div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"css/index.css\"</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">            template: path.join(__dirname, <span class=\"string\">'index.html'</span>), <span class=\"comment\">// 生成html文件的模板</span></div><div class=\"line\">            title: <span class=\"string\">'demo'</span>,                                <span class=\"comment\">// 配置页面的title</span></div><div class=\"line\">            filename: <span class=\"string\">'index.html'</span>,                       <span class=\"comment\">// 输出的html的名字</span></div><div class=\"line\">            hash: <span class=\"literal\">true</span>                                    <span class=\"comment\">// 加上hash防止缓存</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">        <span class=\"keyword\">new</span> UglifyJSPlugin()                              <span class=\"comment\">// 压缩</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>webpack服务器 (devServer)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>); <span class=\"comment\">// 自动生成一个html文件</span></div><div class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"extract-text-webpack-plugin\"</span>); <span class=\"comment\">// 分离css</span></div><div class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>); <span class=\"comment\">// 清除打包前的旧文件</span></div><div class=\"line\"><span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>); <span class=\"comment\">// 压缩</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exprots = &#123;</div><div class=\"line\">    entry: [__dirname + <span class=\"string\">'/src/index.js'</span>],</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: path.resolve(__dirname + <span class=\"string\">'/dist'</span>),</div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    devServer: &#123;</div><div class=\"line\">        port: <span class=\"number\">8080</span>,</div><div class=\"line\">        hot: <span class=\"literal\">true</span>,</div><div class=\"line\">        host: <span class=\"string\">'0.0.0.0'</span>, <span class=\"comment\">// 配置可使用ip访问</span></div><div class=\"line\">        inline: <span class=\"literal\">true</span>,</div><div class=\"line\">        progress: <span class=\"literal\">true</span>,</div><div class=\"line\">        disableHostCheck: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"built_in\">module</span>: &#123;</div><div class=\"line\">      loaders: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(htm|html)$/i</span>,</div><div class=\"line\">                loader: <span class=\"string\">'html-withimg-loader'</span> <span class=\"comment\">// 处理html中引入的图片问题</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.js?$/</span>,</div><div class=\"line\">                exclude: <span class=\"regexp\">/node_modules/</span>,</div><div class=\"line\">                loader: <span class=\"string\">'eslint-loader'</span>,</div><div class=\"line\">                include: [__dirname + <span class=\"string\">'/src/js'</span>]</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.(png|jpe?g|gif|svg)(\\?.*)?$/</span>,</div><div class=\"line\">                loader: <span class=\"string\">'url-loader'</span>,</div><div class=\"line\">                query: &#123;</div><div class=\"line\">                    limit: <span class=\"number\">10000</span>,</div><div class=\"line\">                    name: (<span class=\"string\">'img/[name].[hash:7].[ext]'</span>)</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                test: <span class=\"regexp\">/\\.css$/</span>,</div><div class=\"line\">                loader: ExtractTextPlugin.extract(<span class=\"string\">\"style-loader\"</span>, <span class=\"string\">\"css-loader\"</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]  </div><div class=\"line\">    &#125;,</div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">// 打包前先清除dist里的文件</span></div><div class=\"line\">        <span class=\"keyword\">new</span> ExtractTextPlugin(<span class=\"string\">\"css/index.css\"</span>),</div><div class=\"line\">        <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</div><div class=\"line\">            template: path.join(__dirname, <span class=\"string\">'index.html'</span>), <span class=\"comment\">// 生成html文件的模板</span></div><div class=\"line\">            title: <span class=\"string\">'demo'</span>,  <span class=\"comment\">// 配置页面的title</span></div><div class=\"line\">            filename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">// 输出的html的名字</span></div><div class=\"line\">            hash: <span class=\"literal\">true</span>  <span class=\"comment\">// 加上hash防止缓存</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">        <span class=\"keyword\">new</span> UglifyJSPlugin() <span class=\"comment\">// 压缩</span></div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上本文提到path.resolve 和__dirname 可看我另一篇path</p>\n","categories":["webpack"],"tags":["webpack"]},{"title":"node中的path模块","url":"‘http://www.zputalk.top’/2017/10/25/node中的path模块/","content":"<h1 id=\"path-join\"><a href=\"#path-join\" class=\"headerlink\" title=\"path.join()\"></a>path.join()</h1><p>连接path的片段，并生成规范的路径，长度为0的path会被忽略。连接后如果为一个长度为0的字符串则为 ‘.’,为当前这个目录。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> indexPath = path.join(<span class=\"string\">'/app'</span>, <span class=\"string\">'/home'</span>, <span class=\"string\">'tab'</span>, <span class=\"string\">'..'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(indexPath) <span class=\"comment\">// /app/home</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"path-resolve\"><a href=\"#path-resolve\" class=\"headerlink\" title=\"path.resolve()\"></a>path.resolve()</h1><p>会解析一个路径或者路径片段为一个绝对路径，在给定的路径中从右向左进行处理。长度为0的path会被忽略。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> indexPath = path.resolve(<span class=\"string\">'/app'</span>, <span class=\"string\">'/home'</span>, <span class=\"string\">'/A'</span>, <span class=\"string\">'/B'</span>, <span class=\"string\">'/C'</span>, <span class=\"string\">'../D'</span>)</div><div class=\"line\">其实就是调用终端的cd 和 pwd命令</div><div class=\"line\">cd app</div><div class=\"line\">cd home</div><div class=\"line\">cd A</div><div class=\"line\">cd B</div><div class=\"line\">cd C</div><div class=\"line\">cd ../D</div><div class=\"line\">pwd  输出: app/home/A/B/D</div></pre></td></tr></table></figure></p>\n<h1 id=\"dirname-和-filename\"><a href=\"#dirname-和-filename\" class=\"headerlink\" title=\" dirname 和  filename\"></a><strong> dirname 和 </strong> filename</h1><p>新建一个项目node_demo –&gt; 新建文件夹home –&gt; 新建文件 test.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(__dirname) <span class=\"comment\">// node_demo/home</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(__filename) <span class=\"comment\">// node_demo/home/test.js</span></div></pre></td></tr></table></figure></p>\n","categories":["node"],"tags":["node"]},{"title":"ES6常用特性","url":"‘http://www.zputalk.top’/2017/08/19/ES6常用特性/","content":"<h1 id=\"let-const和块级作用域\"><a href=\"#let-const和块级作用域\" class=\"headerlink\" title=\"let const和块级作用域\"></a>let const和块级作用域</h1><p>const定义常量 let定义变量 let会使该变量处于一个块级作用域。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">         str = <span class=\"string\">'Hello'</span>; <span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'Hello World'</span>;</div><div class=\"line\">str = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// Hello</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><p>箭头函数对上下文的绑定是强制性的，无法通过 apply 或 call 方法改变其上下文。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo =&gt; foo + <span class=\"string\">'Hello'</span>;</div><div class=\"line\">(bar, foo) =&gt; foo + bar;</div><div class=\"line\">foo =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> foo + <span class=\"string\">'Hello'</span></div><div class=\"line\">&#125;</div><div class=\"line\">(bar, foo) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar + foo</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h1><p>支持赋值变量 支持换行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> H = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> W = <span class=\"string\">'World'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`javascript</span></div><div class=\"line\"><span class=\"string\">             <span class=\"subst\">$&#123;H&#125;</span></span></div><div class=\"line\"><span class=\"string\">             <span class=\"subst\">$&#123;W&#125;</span></span></div><div class=\"line\"><span class=\"string\">             `</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(str) <span class=\"comment\">// javascript Hello World</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"对象字面量扩展法\"><a href=\"#对象字面量扩展法\" class=\"headerlink\" title=\"对象字面量扩展法\"></a>对象字面量扩展法</h1><p>省略 function<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bar () &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同名方法属性省略方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>&#123;</div><div class=\"line\">    bar</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"表达式结构\"><a href=\"#表达式结构\" class=\"headerlink\" title=\"表达式结构\"></a>表达式结构</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      bar: bar,</div><div class=\"line\">      foo: foo</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;bar, foo&#125; = bar();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x,,y] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(y); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n<h1 id=\"函数参数表达、传参\"><a href=\"#函数参数表达、传参\" class=\"headerlink\" title=\"函数参数表达、传参\"></a>函数参数表达、传参</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span> (<span class=\"params\">x, y = <span class=\"number\">1</span>, z = <span class=\"number\">2</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(z);</div><div class=\"line\">&#125;</div><div class=\"line\">bar(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>); <span class=\"comment\">// a b 2</span></div></pre></td></tr></table></figure>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p>是一组键值对的结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"string\">'a'</span>, <span class=\"number\">1</span>], [<span class=\"string\">'b'</span>, <span class=\"number\">2</span>], [<span class=\"string\">'c'</span>, <span class=\"number\">3</span>]];</div><div class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> map(arr);</div><div class=\"line\">m.get(<span class=\"string\">'a'</span>); <span class=\"comment\">//获取 1;</span></div><div class=\"line\">m.set(<span class=\"string\">'d'</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 赋值</span></div><div class=\"line\">m.has(<span class=\"string\">'b'</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>set也为key的集合，key不允许重复<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> set (arr);  <span class=\"comment\">// [1,2,3,4]</span></div><div class=\"line\">s.add(<span class=\"number\">5</span>);               <span class=\"comment\">// [1,2,3,4,5]</span></div><div class=\"line\">s.delete(<span class=\"number\">1</span>)             <span class=\"comment\">// [2,3,4,5]</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"class\"><a href=\"#class\" class=\"headerlink\" title=\"class\"></a>class</h1><p>类的属性后不能加逗号<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span> (name, age, gender) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">        <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">    &#125;</div><div class=\"line\">    say () &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span> (name, age, 'man') &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name, age, <span class=\"string\">'man'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"keyword\">new</span> Man(<span class=\"string\">'xiaoming'</span>, <span class=\"number\">22</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(me.say());</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">  <span class=\"keyword\">static</span> isMan(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj <span class=\"keyword\">instanceof</span> Man</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> me = <span class=\"keyword\">new</span> Man()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Man.isMan(me)) <span class=\"comment\">//=&gt; true</span></div></pre></td></tr></table></figure>\n<h1 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h1>","categories":["ES6"],"tags":["ES6,ES2015"]},{"title":"","url":"‘http://www.zputalk.top’/personal-style.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/bg.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\n","categories":[],"tags":[]},{"title":"about","url":"‘http://www.zputalk.top’/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"‘http://www.zputalk.top’/category/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"‘http://www.zputalk.top’/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"‘http://www.zputalk.top’/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"‘http://www.zputalk.top’/tag/index.html","content":"","categories":[],"tags":[]}]